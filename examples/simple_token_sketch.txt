contract SimpleToken {
    // State variables
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    // Event definitions
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    // Global specification
    //@global invariant: totalSupply >= 0
    //@global constraint: balanceOf[address] >= 0
    //@global assumption: msg.sender != address(0)
    
    // Constructor
    function constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        //@function constructor pre: _initialSupply > 0 && _decimals <= 18
        //@function constructor post: name == _name && symbol == _symbol && totalSupply == _initialSupply
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply;
        balanceOf[msg.sender] = _initialSupply;
        emit Transfer(address(0), msg.sender, _initialSupply);
    }
    
    // Transfer function
    function transfer(address to, uint256 amount) public returns (bool) {
        //@function transfer pre: to != address(0) && balanceOf[msg.sender] >= amount
        //@function transfer post: balanceOf[msg.sender] == old(balanceOf[msg.sender]) - amount && balanceOf[to] == old(balanceOf[to]) + amount
        require(to != address(0), "Invalid recipient");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }
    
    // Approve function
    function approve(address spender, uint256 amount) public returns (bool) {
        //@function approve pre: spender != address(0)
        //@function approve post: allowance[msg.sender][spender] == amount
        require(spender != address(0), "Invalid spender");
        
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    // TransferFrom function
    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        //@function transferFrom pre: from != address(0) && to != address(0) && balanceOf[from] >= amount && allowance[from][msg.sender] >= amount
        //@function transferFrom post: balanceOf[from] == old(balanceOf[from]) - amount && balanceOf[to] == old(balanceOf[to]) + amount && allowance[from][msg.sender] == old(allowance[from][msg.sender]) - amount
        require(from != address(0), "Invalid sender");
        require(to != address(0), "Invalid recipient");
        require(balanceOf[from] >= amount, "Insufficient balance");
        require(allowance[from][msg.sender] >= amount, "Insufficient allowance");
        
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        allowance[from][msg.sender] -= amount;
        emit Transfer(from, to, amount);
        return true;
    }
} 